// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:

    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=Mux1OUT); // See if it is A register or computation, the first Mux

    // Implement the logic for A
    And(a=instruction[15], b=instruction[5], out=registerA);
    Not(in=instruction[15], out=computationA);
    Or(a=registerA, b=computationA, out=loadA);
    ARegister(in=Mux1OUT, load=loadA, out[0..14]=addressM, out=outA); // Direct output to addressM

    // Implement the second Mux
    Mux16(a=outA, b=inM, sel=instruction[12], out=AM);

    // Implement D
    And(a=instruction[15], b=instruction[4], out=loadD); // See if we want to load D
    DRegister(in=ALUoutput, load=loadD, out=outD);

    // Implement the ALU 
    ALU(x=outD, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, ng=ng, zr=zr);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Implement PC 
    And(a=ng, b=instruction[2], out=negative);
    And(a=zr, b=instruction[1], out=zero);

    Not(in=ng, out=notNG);
    Not(in=zr, out=notZR);

    And(a=notNG, b=notZR, out=PO);
    And(a=instruction[0], b=PO, out=positive);

    Or(a=negative, b=zero, out=zeroOrnegative);
    Or(a=zeroOrnegative, b=positive, out=all);

    And(a=instruction[15], b=all, out=loadPC);
    PC(in=outA, inc=true, load=loadPC, reset=reset, out[0..14]=pc);
}